/**
 * Scrollax.js
 * 
 * Parallax Scrolling Library
 * http://iprodev.github.io/Scrollax.js
 *
 * @version: 1.0.0
 * @released: July 21, 2015
 *
 * @author: iProDev (Hemn Chawroka)
 *          http://iprodev.com/
 *
 * Licensed under the MIT license.
 * http://opensource.org/licenses/MIT
 */
(function($) {
    // Define Scrollax function
    function Scrollax(element) {
        if (console && console.warn)
            console.warn("Scrollax: " + message);
        else
            throw "Scrollax: " + message;
    }

    // Check if the element is a window object
    function isWindow(obj) {
        return !!(
            obj && 
            "object" === typeof obj && 
            "object" === typeof obj.window && 
            obj.window == obj && 
            obj.setTimeout && 
            obj.alert
        );
    }

    // Get the dimensions and position of an element
    function getElementDimensionsAndPosition(element) {
        var hasPageOffset = !!("pageYOffset" in element);
        return {
            width: hasPageOffset ? window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth : element.offsetWidth,
            height: hasPageOffset ? window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight : element.offsetHeight,
            left: hasPageOffset ? element.pageXOffset || element.scrollLeft : element.scrollLeft,
            top: hasPageOffset ? element.pageYOffset || element.scrollTop : element.scrollTop
        };
    }

    // Parse the data attributes of an element to get options
    function parseDataAttributes(element) {
        return (data = element.data("scrollax")) && eval("({" + data + "})") || {};
    }

    // Check if an element is a valid window object
    function isValidWindow(element) {
        return !!(
            element && 
            "object" === typeof element && 
            "object" === typeof element.window && 
            element.window == element && 
            element.setTimeout && 
            element.alert &&
            (doc = element.document) &&
            "object" === typeof (win = doc.defaultView || doc.parentWindow) &&
            "object" === typeof win
        );
    }

    // Array prototype shortcuts
    var ArrayPrototype = Array.prototype;
    var arrayPush = ArrayPrototype.push;
    var arraySplice = ArrayPrototype.splice;

    // Regular expression to match numbers
    var numberRegExp = /[-+]?\d+(\.\d+)?/g;

    // List of CSS properties for transformation
    var transformProperties = "translateX translateY rotate rotateX rotateY rotateZ skewX skewY scaleX scaleY".split(" ");

    // Cache frequently used variables
    var windowElement = $(window);
    var bodyElement = $(document.body);
    var requestAnimationFrame, cancelAnimationFrame;

    // Function to animate scroll
    var scroll = function(event) {
        if (G) {
            G = clearTimeout(G);
        }
        G = setTimeout(function() {
            instance.reload();
        });
    };

    // Function to destroy the Scrollax instance
    var destroy = function() {
        removeEventListener(window, "resize", scroll);
        removeEventListener(element, "scroll", reload);
        each(instances, function(index, instance) {
            if (instance.frame === element) {
                instances.splice(index, 1);
            }
        });
        parents.length = 0;
        instance.initialized = false;
        triggerEvent("destroy");
    };

    // Function to initialize the Scrollax instance
    var init = function() {
        if (!instance.initialized) {
            on("parse", options);
            parse();
            setup();
            addEventListener(window, "resize", scroll);
            addEventListener(element, "scroll", reload);
            instances.push(instance);
            instance.initialized = true;
            triggerEvent("initialized");
        }
        return instance;
    };

    // Define Scrollax default options
    Scrollax.defaults = {
        horizontal: false,
        offset: 0,
        parentSelector: null,
        elementsSelector: null,
        performanceTrick: false
    };

    // Define Scrollax prototype methods
    Scrollax.prototype = {
        scroll: reload,
        getIndex: getIndex,
        one: function(event, callback) {
            function once() {
                callback.apply(instance, arguments);
                off(event, once);
            }
            on(event, once);
            return instance;
        },
        on: on,
        off: off,
        set: function(option, value) {
            if ($.isPlainObject(option)) {
                $.extend(options, option);
            } else if (options.hasOwnProperty(option)) {
                options[option] = value;
            }
            parse();
            return instance;
        },
        destroy: destroy,
        init: init
    };

    // Define Scrollax jQuery plugin
    $.fn.Scrollax = function(option, callback) {
        if (!$.isPlainObject(option)) {
            var args = slice.call(arguments, 1);
            option = option === false ? "destroy" : option;
            return this.each(function(index, element) {
                var instance = $.data(element, "scrollax");
                if (instance || option === "destroy") {
                    if (instance && option && instance[option]) {
                        instance[option].apply(instance, args);
                    }
                    if (option === "destroy") {
                        $.data(element, "scrollax", null);
                    }
                } else {
                    $.data(element, "scrollax", (new Scrollax(element, option, callback)).init());
                }
            });
        } else {
            return this.each(function(index, element) {
                $.data(element, "scrollax", (new Scrollax(element, option, callback)).init());
            });
        }
    };

    // Initialize Scrollax instances
    $.Scrollax = function(element, options) {
        return window.Scrollax(element, options);
    };

    // Export Scrollax
    window.Scrollax = Scrollax;

})(jQuery);
